{
  "tools": [
    {
      "name": "chainlink_vrf_request_randomness",
      "description": "Request verifiable randomness from Chainlink VRF. Returns cryptographically secure random numbers that can be verified onchain.",
      "input_schema": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "integer",
            "description": "VRF subscription ID for billing the randomness request"
          },
          "keyHash": {
            "type": "string",
            "description": "Key hash specifying which oracle network to use for randomness generation"
          },
          "requestConfirmations": {
            "type": "integer",
            "description": "Number of block confirmations to wait before fulfilling the request",
            "default": 3,
            "minimum": 3,
            "maximum": 200
          },
          "callbackGasLimit": {
            "type": "integer",
            "description": "Gas limit for the fulfillRandomWords callback function",
            "default": 100000
          },
          "numWords": {
            "type": "integer",
            "description": "Number of random words to request (1-500)",
            "default": 1,
            "minimum": 1,
            "maximum": 500
          },
          "blockchain": {
            "type": "string",
            "enum": ["ethereum", "polygon", "arbitrum", "avalanche", "bsc", "fantom"],
            "description": "Blockchain network to request randomness on"
          },
          "requesterPrivateKey": {
            "type": "string",
            "description": "Private key of the requester for transaction signing"
          }
        },
        "required": ["subscriptionId", "keyHash", "blockchain", "requesterPrivateKey"]
      }
    },
    {
      "name": "chainlink_vrf_create_subscription",
      "description": "Create a new VRF subscription for managing randomness request billing and consumer contracts.",
      "input_schema": {
        "type": "object",
        "properties": {
          "blockchain": {
            "type": "string",
            "enum": ["ethereum", "polygon", "arbitrum", "avalanche", "bsc", "fantom"],
            "description": "Blockchain network to create subscription on"
          },
          "ownerPrivateKey": {
            "type": "string",
            "description": "Private key of the subscription owner"
          }
        },
        "required": ["blockchain", "ownerPrivateKey"]
      }
    },
    {
      "name": "chainlink_vrf_fund_subscription",
      "description": "Fund a VRF subscription with LINK tokens to pay for randomness requests.",
      "input_schema": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "integer",
            "description": "VRF subscription ID to fund"
          },
          "amount": {
            "type": "string",
            "description": "Amount of LINK to add (in LINK units, e.g., '10.5')"
          },
          "blockchain": {
            "type": "string",
            "enum": ["ethereum", "polygon", "arbitrum", "avalanche", "bsc", "fantom"],
            "description": "Blockchain network of the subscription"
          },
          "funderPrivateKey": {
            "type": "string",
            "description": "Private key of the account funding the subscription"
          }
        },
        "required": ["subscriptionId", "amount", "blockchain", "funderPrivateKey"]
      }
    },
    {
      "name": "chainlink_vrf_add_consumer",
      "description": "Add a consumer contract to a VRF subscription to allow it to request randomness.",
      "input_schema": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "integer",
            "description": "VRF subscription ID to add consumer to"
          },
          "consumerAddress": {
            "type": "string",
            "description": "Address of the consumer contract to add"
          },
          "blockchain": {
            "type": "string",
            "enum": ["ethereum", "polygon", "arbitrum", "avalanche", "bsc", "fantom"],
            "description": "Blockchain network of the subscription"
          },
          "ownerPrivateKey": {
            "type": "string",
            "description": "Private key of the subscription owner"
          }
        },
        "required": ["subscriptionId", "consumerAddress", "blockchain", "ownerPrivateKey"]
      }
    },
    {
      "name": "chainlink_vrf_remove_consumer",
      "description": "Remove a consumer contract from a VRF subscription to revoke its randomness request permissions.",
      "input_schema": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "integer",
            "description": "VRF subscription ID to remove consumer from"
          },
          "consumerAddress": {
            "type": "string",
            "description": "Address of the consumer contract to remove"
          },
          "blockchain": {
            "type": "string",
            "enum": ["ethereum", "polygon", "arbitrum", "avalanche", "bsc", "fantom"],
            "description": "Blockchain network of the subscription"
          },
          "ownerPrivateKey": {
            "type": "string",
            "description": "Private key of the subscription owner"
          }
        },
        "required": ["subscriptionId", "consumerAddress", "blockchain", "ownerPrivateKey"]
      }
    },
    {
      "name": "chainlink_vrf_get_subscription_details",
      "description": "Get details about a VRF subscription including balance, consumers, and usage statistics.",
      "input_schema": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "integer",
            "description": "VRF subscription ID to query"
          },
          "blockchain": {
            "type": "string",
            "enum": ["ethereum", "polygon", "arbitrum", "avalanche", "bsc", "fantom"],
            "description": "Blockchain network of the subscription"
          }
        },
        "required": ["subscriptionId", "blockchain"]
      }
    },
    {
      "name": "chainlink_vrf_estimate_costs",
      "description": "Estimate the cost of a VRF randomness request to help with budgeting and gas optimization.",
      "input_schema": {
        "type": "object",
        "properties": {
          "callbackGasLimit": {
            "type": "integer",
            "description": "Gas limit for the fulfillRandomWords callback",
            "default": 100000
          },
          "numWords": {
            "type": "integer",
            "description": "Number of random words to request",
            "default": 1
          },
          "requestConfirmations": {
            "type": "integer",
            "description": "Number of block confirmations",
            "default": 3
          },
          "blockchain": {
            "type": "string",
            "enum": ["ethereum", "polygon", "arbitrum", "avalanche", "bsc", "fantom"],
            "description": "Blockchain network to estimate costs for"
          }
        },
        "required": ["blockchain"]
      }
    },
    {
      "name": "chainlink_vrf_verify_randomness",
      "description": "Verify that a VRF proof is valid and corresponds to the requested randomness. Essential for ensuring integrity.",
      "input_schema": {
        "type": "object",
        "properties": {
          "proof": {
            "type": "string",
            "description": "VRF proof data (hex encoded) received from the oracle"
          },
          "publicKey": {
            "type": "string",
            "description": "Public key of the VRF oracle (hex encoded)"
          },
          "seed": {
            "type": "string",
            "description": "Original seed used for the randomness request (hex encoded)"
          },
          "requestId": {
            "type": "string",
            "description": "Request ID for the randomness request"
          },
          "blockchain": {
            "type": "string",
            "enum": ["ethereum", "polygon", "arbitrum", "avalanche", "bsc", "fantom"],
            "description": "Blockchain network where verification should occur"
          }
        },
        "required": ["proof", "publicKey", "seed", "requestId", "blockchain"]
      }
    },
    {
      "name": "chainlink_vrf_get_keyhashes",
      "description": "Get available VRF key hashes and their corresponding gas lane prices for different networks.",
      "input_schema": {
        "type": "object",
        "properties": {
          "blockchain": {
            "type": "string",
            "enum": ["ethereum", "polygon", "arbitrum", "avalanche", "bsc", "fantom"],
            "description": "Blockchain network to get key hashes for"
          },
          "environment": {
            "type": "string",
            "enum": ["mainnet", "testnet"],
            "description": "Network environment",
            "default": "mainnet"
          }
        },
        "required": ["blockchain"]
      }
    },
    {
      "name": "chainlink_vrf_create_consumer_contract",
      "description": "Generate Solidity code for a VRF consumer contract that can request and handle randomness.",
      "input_schema": {
        "type": "object",
        "properties": {
          "contractName": {
            "type": "string",
            "description": "Name for the VRF consumer contract"
          },
          "randomnessUseCase": {
            "type": "string",
            "enum": ["lottery", "gaming", "nft_reveal", "random_selection", "custom"],
            "description": "Primary use case for the randomness",
            "default": "custom"
          },
          "customFulfillmentLogic": {
            "type": "string",
            "description": "Custom Solidity code to handle received randomness",
            "default": ""
          },
          "accessControl": {
            "type": "boolean",
            "description": "Whether to include access control for randomness requests",
            "default": true
          },
          "requestCooldown": {
            "type": "integer",
            "description": "Minimum seconds between randomness requests (0 for no cooldown)",
            "default": 0
          }
        },
        "required": ["contractName"]
      }
    },
    {
      "name": "chainlink_vrf_batch_request",
      "description": "Request multiple random numbers in a single transaction for gas efficiency in high-volume applications.",
      "input_schema": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "integer",
            "description": "VRF subscription ID for billing"
          },
          "keyHash": {
            "type": "string",
            "description": "Key hash for the oracle network"
          },
          "requestConfirmations": {
            "type": "integer",
            "description": "Block confirmations to wait",
            "default": 3
          },
          "callbackGasLimit": {
            "type": "integer",
            "description": "Gas limit for callback execution",
            "default": 200000
          },
          "batchSize": {
            "type": "integer",
            "description": "Number of separate randomness requests in the batch",
            "minimum": 1,
            "maximum": 10
          },
          "wordsPerRequest": {
            "type": "integer",
            "description": "Number of random words per individual request",
            "default": 1,
            "minimum": 1,
            "maximum": 500
          },
          "blockchain": {
            "type": "string",
            "enum": ["ethereum", "polygon", "arbitrum", "avalanche", "bsc", "fantom"],
            "description": "Blockchain network"
          },
          "requesterPrivateKey": {
            "type": "string",
            "description": "Private key for transaction signing"
          }
        },
        "required": ["subscriptionId", "keyHash", "batchSize", "blockchain", "requesterPrivateKey"]
      }
    },
    {
      "name": "chainlink_vrf_direct_funding_request",
      "description": "Request randomness using direct funding (pay per request) instead of subscription model. Useful for one-off requests.",
      "input_schema": {
        "type": "object",
        "properties": {
          "keyHash": {
            "type": "string",
            "description": "Key hash for the oracle network"
          },
          "requestConfirmations": {
            "type": "integer",
            "description": "Block confirmations to wait",
            "default": 3
          },
          "callbackGasLimit": {
            "type": "integer",
            "description": "Gas limit for callback execution",
            "default": 100000
          },
          "numWords": {
            "type": "integer",
            "description": "Number of random words to request",
            "default": 1,
            "minimum": 1,
            "maximum": 500
          },
          "linkPayment": {
            "type": "string",
            "description": "Amount of LINK to pay for this request (in LINK units)"
          },
          "blockchain": {
            "type": "string",
            "enum": ["ethereum", "polygon", "arbitrum", "avalanche", "bsc", "fantom"],
            "description": "Blockchain network"
          },
          "requesterPrivateKey": {
            "type": "string",
            "description": "Private key for transaction signing"
          }
        },
        "required": ["keyHash", "linkPayment", "blockchain", "requesterPrivateKey"]
      }
    }
  ]
} 